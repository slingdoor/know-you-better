generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  
  // Profile information
  dateOfBirth   DateTime?
  gender        String?
  location      String?
  emergencyContact String?
  
  // Mental health related
  isMinor       Boolean   @default(true)
  parentEmail   String?
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  analyses      Analysis[]
  appointments  Appointment[]
  posts         Post[]
  comments      Comment[]
  counselorProfile CounselorProfile?
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Analysis {
  id            String        @id @default(cuid())
  userId        String
  imageUrl      String
  status        AnalysisStatus @default(PENDING)
  
  // AI Analysis Results
  personalityInsights Json?
  emotionalState      Json?
  recommendations     Json?
  riskLevel          RiskLevel?
  
  // Timestamps
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relations
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("analyses")
}

model CounselorProfile {
  id            String   @id @default(cuid())
  userId        String   @unique
  
  // Professional Information
  licenseNumber String   @unique
  specializations String[]
  experience    Int      // years of experience
  education     String
  bio           String?
  
  // Availability
  isActive      Boolean  @default(true)
  hourlyRate    Decimal?
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments  Appointment[]
  
  @@map("counselor_profiles")
}

model Appointment {
  id            String            @id @default(cuid())
  userId        String
  counselorId   String
  
  // Appointment Details
  scheduledAt   DateTime
  duration      Int               @default(60) // minutes
  status        AppointmentStatus @default(SCHEDULED)
  type          AppointmentType   @default(VIDEO)
  notes         String?
  
  // Timestamps
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  
  // Relations
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  counselor     CounselorProfile  @relation(fields: [counselorId], references: [id], onDelete: Cascade)
  
  @@map("appointments")
}

model Post {
  id            String     @id @default(cuid())
  userId        String
  title         String
  content       String
  isAnonymous   Boolean    @default(true)
  category      PostCategory @default(GENERAL)
  
  // Moderation
  isModerated   Boolean    @default(false)
  isApproved    Boolean    @default(false)
  
  // Timestamps
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  // Relations
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments      Comment[]
  
  @@map("posts")
}

model Comment {
  id            String   @id @default(cuid())
  postId        String
  userId        String
  content       String
  isAnonymous   Boolean  @default(true)
  
  // Moderation
  isModerated   Boolean  @default(false)
  isApproved    Boolean  @default(false)
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  post          Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("comments")
}

model Article {
  id            String        @id @default(cuid())
  title         String
  slug          String        @unique
  content       String
  excerpt       String?
  category      ArticleCategory @default(GENERAL)
  tags          String[]
  
  // Metadata
  authorName    String
  publishedAt   DateTime?
  isPublished   Boolean       @default(false)
  
  // SEO
  metaTitle     String?
  metaDescription String?
  
  // Timestamps
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  @@map("articles")
}

// Enums
enum UserRole {
  USER
  COUNSELOR
  ADMIN
}

enum AnalysisStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum RiskLevel {
  LOW
  MODERATE
  HIGH
  CRITICAL
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum AppointmentType {
  VIDEO
  PHONE
  CHAT
  IN_PERSON
}

enum PostCategory {
  GENERAL
  ANXIETY
  DEPRESSION
  RELATIONSHIPS
  FAMILY
  SCHOOL
  SELF_ESTEEM
  PEER_PRESSURE
}

enum ArticleCategory {
  GENERAL
  MENTAL_HEALTH
  PARENTING
  TEEN_DEVELOPMENT
  COPING_STRATEGIES
  CRISIS_SUPPORT
}